name: macOS CI/CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        required: true
        type: string

permissions:
  contents: write  # 允许创建和修改发布
  actions: read    # 允许读取工作流

env:
  BUILD_TYPE: Release
  BIN_DIR: bin
  GODOT_VERSION: 4.4
  GODOT_RELEASE_NAME: 4.4-stable
  PLATFORM: macos

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.12.8']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.5'
        check-latest: true

    - name: Install protoc-gen-go
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        which protoc-gen-go
        which protoc-gen-go-grpc

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        brew install protobuf
        python -m pip install --upgrade pip
        pip install pyinstaller protobuf pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Download and setup Godot
      run: |
        curl -L -o godot.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_RELEASE_NAME }}/Godot_v${{ env.GODOT_VERSION }}-stable_macos.universal.zip
        unzip godot.zip
        mv Godot.app/Contents/MacOS/Godot /usr/local/bin/
        chmod +x /usr/local/bin/Godot

    - name: Verify Godot installation
      run: |
        Godot --version

    - name: Add BIN_DIR to PATH
      run: |
        echo "${{ github.workspace }}/${{ env.BIN_DIR }}" >> $GITHUB_PATH
        echo "Added ${{ github.workspace }}/${{ env.BIN_DIR }} to PATH"

    - name: Build macOS executable
      run: |
        make dist
        chmod +x ${{ env.BIN_DIR }}/protoc-gen-gdscript

    - name: Run tests
      run: |
        which protoc
        which protoc-gen-gdscript
        which Godot
        
        # Start the HTTP backend server
       
        # Run tests
        make GODOT=Godot test check
        make GODOT=Godot serialize
        
        # HTTP server check
        make GODOT=Godot http_build
        make GODOT=Godot http_test & 
        # Wait for server to start
        sleep 20
 
        make GODOT=Godot http_client

    - name: Create release package
      run: |
        # 从标签获取版本号，如果没有标签则使用分支名
        VERSION=${GITHUB_REF#refs/tags/}
        if [ "$VERSION" = "" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
          # 获取当前分支名
          VERSION=${GITHUB_REF#refs/heads/}
          if [ "$VERSION" = "" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="main"
          fi
        fi
        echo "Using version: ${VERSION}"
        echo "version=${VERSION}" >> $GITHUB_ENV
        PACKAGE_NAME="protoc-gen-gdscript-${{ env.PLATFORM }}-${VERSION}"
        mkdir -p ${PACKAGE_NAME}
        cp -r ${{ env.BIN_DIR }} ${PACKAGE_NAME}/
        cp -r addons ${PACKAGE_NAME}/
        cp README.md README_zh.md ${PACKAGE_NAME}/
        zip -r ${PACKAGE_NAME}.zip ${PACKAGE_NAME}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: protoc-gen-gdscript-${{ env.PLATFORM }}-${{ env.version }}
        path: protoc-gen-gdscript-${{ env.PLATFORM }}-*.zip
        if-no-files-found: error
        retention-days: 14

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/protoc-gen-gdscript-${{ env.PLATFORM }}-*/*.zip
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  cleanup:
#    needs: [build, release]
 #   runs-on: ubuntu-latest
  #  if: always()  # 即使其他作业失败也运行

#    steps:
#    - name: Delete old workflow runs
#      uses: dmvict/clean-workflow-runs@v1
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        save_period: 0
#        save_min_runs_number: 3
