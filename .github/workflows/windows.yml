name: Windows CI/CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  BUILD_TYPE: Release
  BIN_DIR: bin
  GODOT_VERSION: 4.4
  GODOT_RELEASE_NAME: 4.4-stable
  PLATFORM: windows

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.12.8']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller protobuf pytest
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
      shell: pwsh

    - name: Install protoc
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-win64.zip" -OutFile "protoc.zip"
        Expand-Archive -Path "protoc.zip" -DestinationPath "protoc"
        Copy-Item "protoc\bin\protoc.exe" -Destination "C:\Windows\System32\"
      shell: pwsh

    - name: Install GitHub CLI
      run: |
        choco install gh
      shell: pwsh

    - name: Download and setup Godot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $ProgressPreference = 'SilentlyContinue'
        gh release download ${{ env.GODOT_RELEASE_NAME }} -R godotengine/godot -p "Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe.zip"
        Expand-Archive -Path "Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe.zip" -DestinationPath "."
        Move-Item -Path "Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe" -Destination "C:\Windows\System32\Godot.exe"
      shell: pwsh

    - name: Verify Godot installation
      run: |
        Godot.exe --version
      shell: pwsh

    - name: Add BIN_DIR to PATH
      run: |
        echo "${{ github.workspace }}\${{ env.BIN_DIR }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Setup Python Virtual Environment
      run: |
        python -m venv venv
        .\venv\Scripts\Activate.ps1
        python -m pip install --upgrade pip
        python -m pip install pyinstaller protobuf pytest
        if (Test-Path requirements.txt) { python -m pip install -r requirements.txt }
      shell: pwsh

    - name: Build Windows executable
      run: |
        .\venv\Scripts\Activate.ps1
        mkdir -p bin
        .\venv\Scripts\pyinstaller.exe --onefile protoc-gen-gdscript.py --name protoc-gen-gdscript.exe --distpath bin
      shell: pwsh

    - name: Run tests
      run: |
        .\venv\Scripts\Activate.ps1
        where protoc
        where protoc-gen-gdscript
        where Godot.exe
        make test check
#        cd test/godot_test
        make serialize
      shell: pwsh

    - name: Create release package
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
        if (-not $VERSION -or $VERSION -eq $env:GITHUB_REF) {
          $VERSION = $env:GITHUB_REF -replace 'refs/heads/', ''
          if (-not $VERSION -or $VERSION -eq $env:GITHUB_REF) {
            $VERSION = "main"
          }
        }
        echo "Using version: $VERSION"
        echo "version=$VERSION" >> $env:GITHUB_ENV
        $PACKAGE_NAME = "protoc-gen-gdscript-${{ env.PLATFORM }}-$VERSION"
        New-Item -ItemType Directory -Path $PACKAGE_NAME
        Copy-Item -Path "${{ env.BIN_DIR }}" -Destination "$PACKAGE_NAME\" -Recurse
        Copy-Item -Path "addons" -Destination "$PACKAGE_NAME\" -Recurse
        Copy-Item -Path "README.md","README_zh.md" -Destination "$PACKAGE_NAME\"
        Compress-Archive -Path $PACKAGE_NAME -DestinationPath "$PACKAGE_NAME.zip"
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: protoc-gen-gdscript-${{ env.PLATFORM }}-${{ env.version }}
        path: protoc-gen-gdscript-${{ env.PLATFORM }}-*.zip
        if-no-files-found: error
        retention-days: 14

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/protoc-gen-gdscript-${{ env.PLATFORM }}-*/*.zip
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  cleanup:
#    needs: [build, release]
#    runs-on: ubuntu-latest
#    if: always()  # 即使其他作业失败也运行

#    steps:
#    - name: Delete old workflow runs
#      uses: dmvict/clean-workflow-runs@v1
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        save_period: 0
#        save_min_runs_number: 3
